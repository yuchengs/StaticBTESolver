{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StaticBTESolver StaticBTESolver is an open-sourced, GPU-accelerated library for solving the phonon Boltzmann Transport Equation.","title":"Home"},{"location":"#staticbtesolver","text":"StaticBTESolver is an open-sourced, GPU-accelerated library for solving the phonon Boltzmann Transport Equation.","title":"StaticBTESolver"},{"location":"about/","text":"under construction","title":"About"},{"location":"command-line-tool/","text":"Command line tool To save you from using the API (or any C++ programming), we provide a command line utility BTEcmd . You can find BTEcmd under /cpu-build/src or /gpu-build/src . This is the entry point to use StaticBTESolver without having to compile and work with APIs. Arguments Several arguments should be provided. Detailed input file format can be found in the API documentation. -g [string] (required): provide a file with either gmsh native file format (with extension .geo ) or COMSOL native file format (with extension .mphtxt ), or an integer specifying the number of cells if in the setting of 1DG. Note that a .geo file only specifies geometry information while a .mphtxt specifies mesh information. Internally, a .geo file is passed to BTEGeometry , which meshes the geometry and exports to a BTEMesh object. In contrast, a .mphtxt file is passed to the constructor of BTEMesh directly. -m [string] (required): provide a file specifying the bands information in the similar format of Input-dispersion-relation-fp.dat . -b [string] (depends): provide a file specifying the boundary conditions of each boundary. The file format is similar to inputbc2D.dat . If your geometry information is provided with a .geo file, this argument is optional. If absent, you will have to specify boundary conditions interactively. However, if you use a .mphtxt file, this argument is mandatory. -d [integer] (required): provide an integer specifying DM, not DG. (DG is handled automatically) -t [integer] (required): CADOM parameter. Number of discrete polar angle. -p [integer] (required): CADOM parameter. Number of discrete azimuthal angle. -T [float] (optional): reference temperature. Default at 300. -I [integer] (optional): maximum number of iteration. Default at 10000. -x [float] (optional): x-axis scale. Default at 0. -y [float] (optional): y-axis scale. Default at 0. -z [float] (optional): z-axis scale. Default at 0. Sample Input Files Some sample input files are in the /tests directory. For example, you may try path/to/BTEcmd -g path/to/mesh2D.mphtxt \\ -m path/to/Input-dispersion-relation-fp.dat \\ -b path/to/Inputbc2D.dat \\ -d 2 -t 8 -p 8 \\ -x 1e-7 -y 1e-7 -z 1e-7 If you have installed the GPU version, use mpirun : mpirun -np 2 path/to/BTEcmd -g path/to/mesh2D.mphtxt \\ -m path/to/Input-dispersion-relation-fp.dat \\ -b path/to/Inputbc2D.dat \\ -d 2 -t 8 -p 8 \\ -x 1e-7 -y 1e-7 -z 1e-7","title":"Command Line Tool"},{"location":"command-line-tool/#command-line-tool","text":"To save you from using the API (or any C++ programming), we provide a command line utility BTEcmd . You can find BTEcmd under /cpu-build/src or /gpu-build/src . This is the entry point to use StaticBTESolver without having to compile and work with APIs.","title":"Command line tool"},{"location":"command-line-tool/#arguments","text":"Several arguments should be provided. Detailed input file format can be found in the API documentation. -g [string] (required): provide a file with either gmsh native file format (with extension .geo ) or COMSOL native file format (with extension .mphtxt ), or an integer specifying the number of cells if in the setting of 1DG. Note that a .geo file only specifies geometry information while a .mphtxt specifies mesh information. Internally, a .geo file is passed to BTEGeometry , which meshes the geometry and exports to a BTEMesh object. In contrast, a .mphtxt file is passed to the constructor of BTEMesh directly. -m [string] (required): provide a file specifying the bands information in the similar format of Input-dispersion-relation-fp.dat . -b [string] (depends): provide a file specifying the boundary conditions of each boundary. The file format is similar to inputbc2D.dat . If your geometry information is provided with a .geo file, this argument is optional. If absent, you will have to specify boundary conditions interactively. However, if you use a .mphtxt file, this argument is mandatory. -d [integer] (required): provide an integer specifying DM, not DG. (DG is handled automatically) -t [integer] (required): CADOM parameter. Number of discrete polar angle. -p [integer] (required): CADOM parameter. Number of discrete azimuthal angle. -T [float] (optional): reference temperature. Default at 300. -I [integer] (optional): maximum number of iteration. Default at 10000. -x [float] (optional): x-axis scale. Default at 0. -y [float] (optional): y-axis scale. Default at 0. -z [float] (optional): z-axis scale. Default at 0.","title":"Arguments"},{"location":"command-line-tool/#sample-input-files","text":"Some sample input files are in the /tests directory. For example, you may try path/to/BTEcmd -g path/to/mesh2D.mphtxt \\ -m path/to/Input-dispersion-relation-fp.dat \\ -b path/to/Inputbc2D.dat \\ -d 2 -t 8 -p 8 \\ -x 1e-7 -y 1e-7 -z 1e-7 If you have installed the GPU version, use mpirun : mpirun -np 2 path/to/BTEcmd -g path/to/mesh2D.mphtxt \\ -m path/to/Input-dispersion-relation-fp.dat \\ -b path/to/Inputbc2D.dat \\ -d 2 -t 8 -p 8 \\ -x 1e-7 -y 1e-7 -z 1e-7","title":"Sample Input Files"},{"location":"dependencies/","text":"Dependencies StaticBTESolver can be compiled to a CPU version, or a GPU-accelerated version if you have CUDA support. To use the CPU version, the only requirement is Petsc . To use the GPU version, you need at least one CUDA-enabled GPU card and CUDAToolkit installed. Detailed dependencies for both versions are summarized below. CPU version PETSc Please consult PETSc documentation here . FLTK (optional) gmsh's GUI uses FLTK. So if you want to visualize the mesh generated, you have to install FLTK first. curl -O https://www.fltk.org/pub/fltk/1.3.5/fltk-1.3.5-source.tar.gz tar zxvf fltk-1.3.5-source.tar.gz cd fltk-1.3.5 ./configure make && sudo make install OpenCASCADE (optional) OpenCASCADE is a free CAD kernel. If gmsh's build-in kernel is enough for you, you may skip this dependency. However, we may support STEP file format in the future, which will probably use OpenCASCADE . gmsh (optional) gmsh is a free mesh generator. To install, consult gmsh documentation here . Since we use gmsh api for C++ internally, you will need to compile gmsh as a shared library. git clone http://gitlab.onelab.info/gmsh/gmsh.git cd gmsh mkdir build cmake -S. -Bbuild -DENABLE_BUILD_DYNAMIC=1 cd build make && sudo make install GPU version CUDAToolkit (required) Please consult documentation here . We recommend you to use the latest version. viennacl (required) ViennaCL is a GPU-accelerated linear algebra library. It is a header library, so you do not need to worry about how to install it. openmpi (required) You may also use mpich .","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"StaticBTESolver can be compiled to a CPU version, or a GPU-accelerated version if you have CUDA support. To use the CPU version, the only requirement is Petsc . To use the GPU version, you need at least one CUDA-enabled GPU card and CUDAToolkit installed. Detailed dependencies for both versions are summarized below.","title":"Dependencies"},{"location":"dependencies/#cpu-version","text":"","title":"CPU version"},{"location":"dependencies/#petsc","text":"Please consult PETSc documentation here .","title":"PETSc"},{"location":"dependencies/#fltk-optional","text":"gmsh's GUI uses FLTK. So if you want to visualize the mesh generated, you have to install FLTK first. curl -O https://www.fltk.org/pub/fltk/1.3.5/fltk-1.3.5-source.tar.gz tar zxvf fltk-1.3.5-source.tar.gz cd fltk-1.3.5 ./configure make && sudo make install","title":"FLTK (optional)"},{"location":"dependencies/#opencascade-optional","text":"OpenCASCADE is a free CAD kernel. If gmsh's build-in kernel is enough for you, you may skip this dependency. However, we may support STEP file format in the future, which will probably use OpenCASCADE .","title":"OpenCASCADE (optional)"},{"location":"dependencies/#gmsh-optional","text":"gmsh is a free mesh generator. To install, consult gmsh documentation here . Since we use gmsh api for C++ internally, you will need to compile gmsh as a shared library. git clone http://gitlab.onelab.info/gmsh/gmsh.git cd gmsh mkdir build cmake -S. -Bbuild -DENABLE_BUILD_DYNAMIC=1 cd build make && sudo make install","title":"gmsh (optional)"},{"location":"dependencies/#gpu-version","text":"","title":"GPU version"},{"location":"dependencies/#cudatoolkit-required","text":"Please consult documentation here . We recommend you to use the latest version.","title":"CUDAToolkit (required)"},{"location":"dependencies/#viennacl-required","text":"ViennaCL is a GPU-accelerated linear algebra library. It is a header library, so you do not need to worry about how to install it.","title":"viennacl (required)"},{"location":"dependencies/#openmpi-required","text":"You may also use mpich .","title":"openmpi (required)"},{"location":"examples/","text":"Examples Examples using BTEcmd 2DM1DG Make sure you use files in tests/2DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 2 -I 1000 \\ -g 100 \\ -b path/to/tests/2DM1DG/inputbc.dat \\ -m path/to/tests/2DM1DG/band.dat 3DM1DG Make sure you use files in tests/3DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 3 -I 1000 \\ -g 100 \\ -b path/to/tests/3DM1DG/inputbc.dat \\ -m path/to/tests/3DM1DG/band.dat 2DM2DG Make sure you use files in tests/2DM2DG , ./BTEcmd -x 1e-4 -y 1e-4 -z 0 -d 2 -t 8 -p 8 -I 1000000 -b path/to/tests/2DM2DG/inputbc.dat -g path/to/tests/2DM2DG/mesh.mphtxt -m path/to/tests/2DM2DG/band.dat Note this configuration is slow, maybe try x , y with 1e-8 for faster convergence. 3DM2DG Make sure you use files in tests/3DM2DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 0 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM2DG/mesh.mphtxt \\ -b path/to/tests/3DM2DG/inputbc.dat \\ -m path/to/tests/3DM2DG/band.dat 3DM3DG Make sure you use files in tests/3DM3DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 1e-8 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM3DG/mesh.mphtxt \\ -b path/to/tests/3DM3DG/inputbc.dat \\ -m path/to/tests/3DM3DG/band.dat 2DM1DG Make sure you use files in tests/2DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 2 -I 1000 \\ -g 100 \\ -b path/to/tests/2DM1DG/inputbc.dat \\ -m path/to/tests/2DM1DG/band.dat 3DM1DG Make sure you use files in tests/3DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 3 -I 1000 \\ -g 100 \\ -b path/to/tests/3DM1DG/inputbc.dat \\ -m path/to/tests/3DM1DG/band.dat 2DM2DG Make sure you use files in tests/2DM2DG , ./BTEcmd -x 1e-4 -y 1e-4 -z 0 -d 2 -t 8 -p 8 -I 1000000 -b path/to/tests/2DM2DG/inputbc.dat -g path/to/tests/2DM2DG/mesh.mphtxt -m path/to/tests/2DM2DG/band.dat Note this configuration is slow, maybe try x , y with 1e-8 for faster convergence. 3DM2DG Make sure you use files in tests/3DM2DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 0 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM2DG/mesh.mphtxt \\ -b path/to/tests/3DM2DG/inputbc.dat \\ -m path/to/tests/3DM2DG/band.dat 3DM3DG Make sure you use files in tests/3DM3DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 1e-8 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM3DG/mesh.mphtxt \\ -b path/to/tests/3DM3DG/inputbc.dat \\ -m path/to/tests/3DM3DG/band.dat Examples using the API #include <iostream> #include <string> #include \"StaticBTESolver/StaticBTESolver.h\" using namespace std; int main() { double L_x, L_y, L_z, Tref, errnum, qflux; int maxIter; bool backup; int ntheta, nphi; ifstream infile(\"inputdata3D.dat\"); string line; char newline; getline(infile, line); infile >> L_x >> newline; getline(infile, line); infile >> L_y >> newline; getline(infile, line); infile >> L_z >> newline; getline(infile, line); infile >> Tref >> newline; getline(infile, line); infile >> errnum >> newline; getline(infile, line); infile >> ntheta >> newline; getline(infile, line); infile >> nphi >> newline; getline(infile, line); infile >> maxIter >> newline; getline(infile, line); infile >> backup >> newline; infile.close(); ifstream inFile1(\"Input-dispersion-relation-fp.dat\"); auto bands = new BTEBand(inFile1); ifstream inFile2(\"inputbc3D.dat\"); auto bcs = new BTEBoundaryCondition(inFile2); ifstream inFile3(\"mesh3D.mphtxt\"); auto mesh3D = new BTEMesh(inFile3, L_x, L_y, L_z); StaticBTESolver solver(mesh3D, bcs, bands); solver.setParam(3, ntheta, nphi, Tref); solver.solve(maxIter); return 0; } On SJTU PI cluster The following script can be used to submit a job using two cores, each for one GPU card. #!/bin/bash #SBATCH --job-name=name #SBATCH --partition=dgx2 #SBATCH --output=%j.out #SBATCH --error=%j.err #SBATCH --time=00-00:05:00 #SBATCH -n 2 #SBATCH --gres=gpu:2 #SBATCH --ntasks-per-node 2 #SBATCH --mail-type=end #SBATCH --mail-user=youremail module purge module load gcc/8.3.0-gcc-4.8.5 module load openmpi/3.1.5-gcc-8.3.0 module load cuda/10.1.243-gcc-8.3.0 srun --mpi=pmi2 gpu-build/src/BTEcmd -x 1e-8 -y 1e-8 \\ -t 8 -p 8 -d 2 -I 1000 \\ -g /path/to/2D_78000.mphtxt \\ -b /path/to/inputbc_2D.dat \\ -m /path/to/Input-dispersion-relation-fp.dat","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#examples-using-btecmd","text":"","title":"Examples using BTEcmd"},{"location":"examples/#2dm1dg","text":"Make sure you use files in tests/2DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 2 -I 1000 \\ -g 100 \\ -b path/to/tests/2DM1DG/inputbc.dat \\ -m path/to/tests/2DM1DG/band.dat","title":"2DM1DG"},{"location":"examples/#3dm1dg","text":"Make sure you use files in tests/3DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 3 -I 1000 \\ -g 100 \\ -b path/to/tests/3DM1DG/inputbc.dat \\ -m path/to/tests/3DM1DG/band.dat","title":"3DM1DG"},{"location":"examples/#2dm2dg","text":"Make sure you use files in tests/2DM2DG , ./BTEcmd -x 1e-4 -y 1e-4 -z 0 -d 2 -t 8 -p 8 -I 1000000 -b path/to/tests/2DM2DG/inputbc.dat -g path/to/tests/2DM2DG/mesh.mphtxt -m path/to/tests/2DM2DG/band.dat Note this configuration is slow, maybe try x , y with 1e-8 for faster convergence.","title":"2DM2DG"},{"location":"examples/#3dm2dg","text":"Make sure you use files in tests/3DM2DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 0 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM2DG/mesh.mphtxt \\ -b path/to/tests/3DM2DG/inputbc.dat \\ -m path/to/tests/3DM2DG/band.dat","title":"3DM2DG"},{"location":"examples/#3dm3dg","text":"Make sure you use files in tests/3DM3DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 1e-8 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM3DG/mesh.mphtxt \\ -b path/to/tests/3DM3DG/inputbc.dat \\ -m path/to/tests/3DM3DG/band.dat","title":"3DM3DG"},{"location":"examples/#2dm1dg_1","text":"Make sure you use files in tests/2DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 2 -I 1000 \\ -g 100 \\ -b path/to/tests/2DM1DG/inputbc.dat \\ -m path/to/tests/2DM1DG/band.dat","title":"2DM1DG"},{"location":"examples/#3dm1dg_1","text":"Make sure you use files in tests/3DM1DG , ./BTEcmd -x 1e-8 -t 8 -p 1 \\ -d 3 -I 1000 \\ -g 100 \\ -b path/to/tests/3DM1DG/inputbc.dat \\ -m path/to/tests/3DM1DG/band.dat","title":"3DM1DG"},{"location":"examples/#2dm2dg_1","text":"Make sure you use files in tests/2DM2DG , ./BTEcmd -x 1e-4 -y 1e-4 -z 0 -d 2 -t 8 -p 8 -I 1000000 -b path/to/tests/2DM2DG/inputbc.dat -g path/to/tests/2DM2DG/mesh.mphtxt -m path/to/tests/2DM2DG/band.dat Note this configuration is slow, maybe try x , y with 1e-8 for faster convergence.","title":"2DM2DG"},{"location":"examples/#3dm2dg_1","text":"Make sure you use files in tests/3DM2DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 0 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM2DG/mesh.mphtxt \\ -b path/to/tests/3DM2DG/inputbc.dat \\ -m path/to/tests/3DM2DG/band.dat","title":"3DM2DG"},{"location":"examples/#3dm3dg_1","text":"Make sure you use files in tests/3DM3DG , ./BTEcmd -x 1e-8 -y 1e-8 -z 1e-8 -t 4 -p 4 \\ -d 3 -I 1000 \\ -g path/to/tests/3DM3DG/mesh.mphtxt \\ -b path/to/tests/3DM3DG/inputbc.dat \\ -m path/to/tests/3DM3DG/band.dat","title":"3DM3DG"},{"location":"examples/#examples-using-the-api","text":"#include <iostream> #include <string> #include \"StaticBTESolver/StaticBTESolver.h\" using namespace std; int main() { double L_x, L_y, L_z, Tref, errnum, qflux; int maxIter; bool backup; int ntheta, nphi; ifstream infile(\"inputdata3D.dat\"); string line; char newline; getline(infile, line); infile >> L_x >> newline; getline(infile, line); infile >> L_y >> newline; getline(infile, line); infile >> L_z >> newline; getline(infile, line); infile >> Tref >> newline; getline(infile, line); infile >> errnum >> newline; getline(infile, line); infile >> ntheta >> newline; getline(infile, line); infile >> nphi >> newline; getline(infile, line); infile >> maxIter >> newline; getline(infile, line); infile >> backup >> newline; infile.close(); ifstream inFile1(\"Input-dispersion-relation-fp.dat\"); auto bands = new BTEBand(inFile1); ifstream inFile2(\"inputbc3D.dat\"); auto bcs = new BTEBoundaryCondition(inFile2); ifstream inFile3(\"mesh3D.mphtxt\"); auto mesh3D = new BTEMesh(inFile3, L_x, L_y, L_z); StaticBTESolver solver(mesh3D, bcs, bands); solver.setParam(3, ntheta, nphi, Tref); solver.solve(maxIter); return 0; }","title":"Examples using the API"},{"location":"examples/#on-sjtu-pi-cluster","text":"The following script can be used to submit a job using two cores, each for one GPU card. #!/bin/bash #SBATCH --job-name=name #SBATCH --partition=dgx2 #SBATCH --output=%j.out #SBATCH --error=%j.err #SBATCH --time=00-00:05:00 #SBATCH -n 2 #SBATCH --gres=gpu:2 #SBATCH --ntasks-per-node 2 #SBATCH --mail-type=end #SBATCH --mail-user=youremail module purge module load gcc/8.3.0-gcc-4.8.5 module load openmpi/3.1.5-gcc-8.3.0 module load cuda/10.1.243-gcc-8.3.0 srun --mpi=pmi2 gpu-build/src/BTEcmd -x 1e-8 -y 1e-8 \\ -t 8 -p 8 -d 2 -I 1000 \\ -g /path/to/2D_78000.mphtxt \\ -b /path/to/inputbc_2D.dat \\ -m /path/to/Input-dispersion-relation-fp.dat","title":"On SJTU PI cluster"},{"location":"installation/","text":"Installation The library use C++17 features, so you should use a compiler supporting that. Also, the minimum required version for cmake is 3.17. Clone this repository: git clone --recurse-submodules https://github.com/yuchengs/StaticBTESolver.git cd StaticBTESolver Then try to generate building tools with mkdir build cmake -S. -Bcpu-build -DCMAKE_BUILD_TYPE=Release # for CPU cmake -S. -Bgpu-build -DCMAKE_BUILD_TYPE=Release -DUSE_GPU=on # for GPU To use GPU version, you should have CUDA support. In case cmake cannot find path to nvcc, provide the path for cmake: cmake -S. -Bgpu-build -DCMAKE_BUILD_TYPE=Release -DUSE_GPU=on -DCMAKE_CUDA_COMPILER=path/to/nvcc To build: cd cpu-build # cd gpu-build for gpu version make","title":"Installation"},{"location":"installation/#installation","text":"The library use C++17 features, so you should use a compiler supporting that. Also, the minimum required version for cmake is 3.17. Clone this repository: git clone --recurse-submodules https://github.com/yuchengs/StaticBTESolver.git cd StaticBTESolver Then try to generate building tools with mkdir build cmake -S. -Bcpu-build -DCMAKE_BUILD_TYPE=Release # for CPU cmake -S. -Bgpu-build -DCMAKE_BUILD_TYPE=Release -DUSE_GPU=on # for GPU To use GPU version, you should have CUDA support. In case cmake cannot find path to nvcc, provide the path for cmake: cmake -S. -Bgpu-build -DCMAKE_BUILD_TYPE=Release -DUSE_GPU=on -DCMAKE_CUDA_COMPILER=path/to/nvcc To build: cd cpu-build # cd gpu-build for gpu version make","title":"Installation"},{"location":"license/","text":"MIT License Copyright (c) 2020 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"public-api/","text":"Public API BTEBand BTEBoundaryCondition BTEMesh BTEGeometry StaticBTESolver","title":"Public API"},{"location":"public-api/#public-api","text":"","title":"Public API"},{"location":"public-api/#bteband","text":"","title":"BTEBand"},{"location":"public-api/#bteboundarycondition","text":"","title":"BTEBoundaryCondition"},{"location":"public-api/#btemesh","text":"","title":"BTEMesh"},{"location":"public-api/#btegeometry","text":"","title":"BTEGeometry"},{"location":"public-api/#staticbtesolver","text":"","title":"StaticBTESolver"},{"location":"release-notes/","text":"","title":"Release Notes"}]}